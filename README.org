#+TITLE: The Productive MacOS
NOTICE: This project is on building, use it as your own risk.

A minimal and productive macOS configration with a good documentation that you can live with for a long time.
This is a source code with documentation repo especially for programmers, if you need explaination with pictures, please visit
https://book.willbc.cn/the-productive-macos/

* Install
Please read this documentation through before running the command below.
#+begin_src bash
git clone https://github.com/willbchang/macos-dotfiles.git
sh macos-dotfiles/install.sh
#+end_src
* Command Line Tools
** Oh My Zsh
*Install Oh-My-Zsh*
#+begin_src sh
sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
#+end_src
*** Plugins
*Zsh Autosuggestions*
#+begin_src sh
git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions
#+end_src

*Zsh Completions*
#+begin_src sh
git clone https://github.com/zsh-users/zsh-completions ${ZSH_CUSTOM:=~/.oh-my-zsh/custom}/plugins/zsh-completions
autoload -U compinit && compinit
#+end_src

*Zsh Syntax Highlighting*
#+begin_src sh
git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting
#+end_src

*** Alias
*Show folder structure with tree view*
#+begin_src sh
alias tree="find . -print | sed -e 's;[^/]*/;|____;g;s;____|; |;g'"
#+end_src

*Set alias for pnpm*
#+begin_src sh
alias p='pnpm'
alias pi='pnpm i'
#+end_src
*** Exports
*Set http(s) proxy for command line*
#+begin_src sh
export http_proxy=http://127.0.0.1:1087
export https_proxy=http://127.0.0.1:1087
#+end_src
*** Functions
*** Configurations
For more configurations, please visit [[https://github.com/ohmyzsh/ohmyzsh/blob/master/templates/zshrc.zsh-template][zshrc-template]]

*For more themes, please visit: [[https://github.com/ohmyzsh/ohmyzsh/wiki/Themes][ohmyzsh-themes]]*
#+begin_src sh
ZSH_THEME='robbyrussell'
#+end_src

*Disable auto-setting terminal title*
#+begin_src sh
DISABLE_AUTO_TITLE='true'
#+end_src

*Dsiable auto update oh-my-zsh*
#+begin_src sh
DISABLE_UPDATE_PROMPT="true"
#+end_src

*Enable zsh plugins*
#+begin_src sh
plugins=(git zsh-autosuggestions zsh-syntax-highlighting)
#+end_src

*Add and reload Oh-My-Zsh configurations*
#+begin_src sh
cat command-line-tools/.zshrc >> ~/.zshrc
source ~/.zshrc
#+end_src
** Brew
*Install package manager: Homebrew*\\
The Missing Package Manager for macOS.
#+begin_src sh
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
#+end_src
*** Brew Tools
*Install brew tool: [[https://github.com/beeftornado/homebrew-rmtree][rmtree]]*\\
It can remove a formula and its unused dependencies. Once you've tapped it, you can use the command as ~brew rmtree~.
#+begin_src sh
brew tap beeftornado/rmtree
#+end_src

*** Command Line Tools
*Install a safe deletion tool: trash*
#+begin_src sh
brew install trash
#+end_src

*** Applications
*Install softwares: IntelliJ IDEA*
#+begin_src sh
brew cask install intellij-idea
#+end_src

*** Fonts
*Install font: Inconsolata*
#+begin_src sh
brew tap homebrew/cask-fonts
brew cask install font-inconsolata
#+end_src
** Git
*Command Line Tool - Control System: Git* >Version
#+begin_src sh
brew install git
#+end_src

*Setup global git ignore*
#+begin_src sh
cp -R command-line-tools/.gitignore_global ~/.gitignore_global
#+end_src
** Node
*Install NodeJS*
#+begin_src sh
brew install node
#+end_src

*Install a better package manager: pnpm*
#+begin_src sh
npm i -g pnpm
#+end_src
** Ruby
*Install Ruby environment*
#+begin_src sh
brew install rbenv
#+end_src

*Initialize rbenv*
#+begin_src sh
rbenv init
echo 'eval "$(rbenv init -)"' >> ~/.zshrc
source ~/.zshrc
#+end_src

*Install latest stable Ruby*
# https://stackoverflow.com/a/30191850
#+begin_src sh
latest_ruby_version=$(rbenv install -l | grep -v - | tail -1)
rbenv install $latest_ruby_version
rbenv rehash
rbenv global $latest_ruby_version
#+end_src

* Applications
** Alfred
*Install Alfred from Brew*
#+begin_src sh
# TODO: Check if Alfred is in Applications/
brew cask install alfred
#+end_src

*Make sure you have the premission and License*
#+begin_src sh
open -a Alfred\ 4
# TODO: Check Permissions with https://github.com/jacobsalmela/tccutil
echo "Please make sure Alfred has permissions"
# TODO: Check License in ~/Library/Application Support/Alfred
echo "Please make sure Alfred has Powerpack License"
read -p "  Press enter to continue "
#+end_src

*Load Alfred Preferences Paths and Functions*\\
You can check it here: [[./applications/alfred-helper.sh][alfred-helper.sh]]
#+begin_src sh
source ./applications/alfred-helper.sh
#+end_src

*** General
*** Features
**** Default Results
*Show System Preferences*
#+begin_src sh
defaults write $default_results showPreferences -bool true
#+end_src

*Hide Contacts*
#+begin_src sh
defaults write $default_results showContacts -bool false
#+end_src

*Hide Folders*
#+begin_src sh
defaults write $default_results showFolders -bool false
#+end_src

*Hide Documents*
#+begin_src sh
defaults write $default_results showDocuments -bool false
#+end_src

*Hide Text Files*
#+begin_src sh
defaults write $default_results showTextFiles -bool false
#+end_src

*Hide Images*
#+begin_src sh
defaults write $default_results showImages -bool false
#+end_src

*Hide Archives*
#+begin_src sh
defaults write $default_results showArchives -bool false
#+end_src

*Hide Apple Scripts*
#+begin_src sh
defaults write $default_results showAppleScripts -bool false
#+end_src

*Disable Search all file types*
#+begin_src sh
defaults write $default_results showAll -bool false
#+end_src
**** File Search
***** Search
*Enable Quick Search*
#+begin_src sh
defaults write "${file_search_path}/prefs.plist" quickSearch -bool true
#+end_src

*Disable 'open' keyword for Opening Files*
#+begin_src sh
defaults write "${file_search_path}/open/prefs.plist" enabled -bool false
#+end_src

*Enable 'find' keyword for Revealing Files(open in Finder)*
#+begin_src sh
defaults write "${file_search_path}/find/prefs.plist" enabled -bool true
#+end_src

*Enable 'in' keyword for seaching content in files*
#+begin_src sh
defaults write "${file_search_path}/in/prefs.plist" enabled -bool true
#+end_src

*Disable 'tags' keyword for seaching File Tags*
#+begin_src sh
defaults write "${file_search_path}/tag/prefs.plist" enabled -bool false
#+end_src

*Ignore Email*
#+begin_src sh
defaults write "${file_search_path}/prefs.plist" ignoreEmail -bool true
#+end_src

*Ignore Bookmarks*
#+begin_src sh
defaults write "${file_search_path}/prefs.plist" ignoreBookmarks -bool true
#+end_src

*Show Music files*
#+begin_src sh
defaults write "${file_search_path}/prefs.plist" ignoreMusic -bool false
#+end_src

*Show Source files*
#+begin_src sh
defaults write "${file_search_path}/prefs.plist" ignoreSource -bool false
#+end_src

*Hide Contacts*
#+begin_src sh
defaults write "${file_search_path}/prefs.plist" ignoreContacts -bool true
#+end_src

*Hide History*
#+begin_src sh
defaults write "${file_search_path}/prefs.plist" ignoreHistory -bool true
#+end_src

*Show Images*
#+begin_src sh
defaults write "${file_search_path}/prefs.plist" ignoreImages -bool false
#+end_src

*Hide Calendar*
#+begin_src sh
defaults write "${file_search_path}/prefs.plist" ignoreCalendar -bool true
#+end_src

*Hide Messages*
#+begin_src sh
defaults write "${file_search_path}/prefs.plist" ignoreMessages -bool true
#+end_src

*Show Plist files*
#+begin_src sh
defaults write "${file_search_path}/prefs.plist" ignorePlist -bool false
#+end_src

*Set Result Limit to 20*
#+begin_src sh
defaults write "${file_search_path}/prefs.plist" limit -int 0
#+end_src
***** Navigation
*Enable Fuzzy Search for Filitering*
#+begin_src sh
defaults write "${file_search_path}/navigation/prefs.plist" fuzzy -bool true
#+end_src

*Use ← and → for folder navigation*
#+begin_src sh
defaults write "${file_search_path}/navigation/prefs.plist" arrowsForFolderNavigation -bool true
#+end_src

*Use ↵ to open folders in Finder*
#+begin_src sh
defaults write "${file_search_path}/navigation/prefs.plist" returnToOpenFolders -bool true
#+end_src

*Disable Previous Path shortcuts*
#+begin_src sh
defaults write "${file_search_path}/navigation/prefs.plist" previousPathHotkey \
'	<dict>
		<key>key</key>
		<integer>-1</integer>
		<key>mod</key>
		<integer>-1</integer>
		<key>string</key>
		<string></string>
	</dict>'
#+end_src

*Set Previous Path Keywords to 'previous'*
#+begin_src sh
defaults write "${file_search_path}/navigation/prefs.plist" previousPathKeyword -string "previous"
#+end_src
***** Buffer
*Disable temporary file buffer*
#+begin_src sh
defaults write "${file_search_path}/buffer/prefs.plist" enabled -bool false
#+end_src
***** Advanced
*Enable Escape path on 'Copy path to Clipboard' action*
#+begin_src sh
defaults write "${file_search_path}/actions/prefs.plist" escapeCopiedPath -bool true
#+end_src

*Disable Run AppleScripts instead of opening*
#+begin_src sh
defaults write "${file_search_path}/prefs.plist" runAppleScripts -bool false
#+end_src

*Enable Use file type icons for files on external drives*
#+begin_src sh
defaults write "${file_search_path}/prefs.plist" fileTypeIconsForExternalFiles -bool true
#+end_src

*Enable Touch folders after opening them*
#+begin_src sh
defaults write "${file_search_path}/prefs.plist" touchFolders -bool true
#+end_src

*Enable Touch aliases after opening them*
#+begin_src sh
defaults write "${file_search_path}/prefs.plist" touchAliases -bool true
#+end_src

*Set Homde Folder to ~*
#+begin_src sh
defaults write "${file_search_path}/navigation/prefs.plist" homeFolder -int 0
#+end_src
*** Workflows
*Install Open in Editor*
#+begin_src sh
install_alfred_workflow "willbchang/alfred-open-in-editor"
#+end_src

*Install Run in Terminal*
#+begin_src sh
install_alfred_workflow "willbchang/alfred-run-in-terminal"
#+end_src

*Install Search Selection*
#+begin_src sh
install_alfred_workflow "willbchang/alfred-search-selection"
#+end_src

*Install GitHub*
#+begin_src sh
install_alfred_workflow "gharlan/alfred-github-workflow"
#+end_src

*Install OCR Screencapture*
*Install OCR Screencapture Dependency: tesseract*
#+begin_src sh
brew install tesseract
#+end_src

#+begin_src sh
curl -LOSs https://raw.githubusercontent.com/BlackwinMin/alfred-gallery/master/OCR%20Screencapture/OCR%20Screencapture.alfredworkflow
open OCR%20Screencapture.alfredworkflow
import_alfred_workflow
trash OCR%20Screencapture.alfredworkflow
#+end_src

*** Appearance
*** Advanced
** Emacs
*Install emacs-plus*
#+begin_src sh
brew tap d12frosted/emacs-plus
brew install emacs-plus
#+end_src

*Make an Emacs.app alias to /Applications*
#+begin_src sh
ln -s /usr/local/opt/emacs-plus/Emacs.app /Applications
#+end_src

*Install doom emacs dependency: ripgrep*
#+begin_src sh
brew install ripgrep
#+end_src

*Install doom emacs*
#+begin_src sh
git clone --depth 1 https://github.com/hlissner/doom-emacs ~/.emacs.d
~/.emacs.d/bin/doom install
#+end_src

*Setup doom emacs for macos*
#+begin_src sh
curl -Sso ~/.doom.d/README.org https://raw.githubusercontent.com/willbchang/macos-emacs-doom.d/master/README.org
echo "(org-babel-load-file \"~/.doom.d/README.org\")" >>~/.doom.d/config.el
#+end_src

*Install vterm dependencies: cmake, libvterm*
#+begin_src sh
brew install cmake
brew install libvterm
#+end_src

*Install shell mode dependency: shfmt*
#+begin_src sh
brew install shfmt
#+end_src

*Rebuild doom emacs packages*
#+begin_src sh
~/.emacs.d/bin/doom sync && ~/.emacs.d/bin/doom build
#+end_src
** Chrome
*Install Google Chrome*
#+begin_src sh
brew cask install google-chrome
#+end_src

#TODO: Install chrome extensions
#https://maclovin.org/blog-native/2015/5/22/osx-deploy-chrome-extensions
** Terminal
*Install terminal theme: Blurred Monokai*
#+begin_src sh
curl -o ./Blurred\ Monokai\ Theme.terminal -k https://raw.githubusercontent.com/willbchang/terminal-blurred-monokai-theme/master/Blurred%20Monokai%20Theme.terminal

open Blurred\ Monokai\ Theme.terminal
rm -rf Blurred\ Monokai\ Theme.terminal

defaults write com.apple.Terminal "Default Window Settings" -string "Blurred Monokai Theme"
defaults write com.apple.Terminal "Startup Window Settings" -string "Blurred Monokai Theme"
#+end_src
** Finder
*** UI
*Use column view in all Finder windows by default*
| Features        | Values | Shortcuts   |
|-----------------+--------+-------------|
| Icon View       | icnv   | Command + 1 |
| List View       | Nlsv   | Command + 2 |
| Column View     | clmv   | Command + 3 |
| Cover Flow View | Flwv   | Command + 4 |
#+begin_src sh
defaults write com.apple.finder FXPreferredViewStyle -string "clmv"
#+end_src

*Remove toolbar icon*
#+begin_src sh
/usr/libexec/PlistBuddy -c "Delete :NSToolbar\ Configuration\ Browser:TB\ Item\ Identifiers" ~/Library/Preferences/com.apple.finder.plist
/usr/libexec/PlistBuddy -c "Add :NSToolbar\ Configuration\ Browser:TB\ Item\ Identifiers array" ~/Library/Preferences/com.apple.finder.plist
#+end_src

*** Home Directory
*Create symlinks from Documents*
#+begin_src sh
ln -s ~/Documents/Code ~/Code
ln -s ~/Documents/Book ~/Book
ln -s ~/Documents/Score ~/Score
#+end_src

*Hide unused home directory: Applications, Movies, Music, Public, Pictures*
#+begin_src sh
chflags hidden ~/Applications ~/Movies ~/Music ~/Public ~/Pictures
#+end_src

*Unhide ~/Library*
#+begin_src sh
xattr -d com.apple.FinderInfo  ~/Library 2> /dev/null
chflags nohidden ~/Library
#+end_src

*Show frequent visited home files and directories: .config, .doom.d, Library, .zshrc*\\
This doesn't work for now.
#+begin_src sh
# chflags nohidden ~/.config ~/.doom.d ~/Library ~/.zshrc
#+end_src
*** General
*Hide icons for Hard disks on the desktop*
#+begin_src sh
defaults write com.apple.finder ShowHardDrivesOnDesktop -bool false
#+end_src

*Show icons for External disks on the desktop*
#+begin_src sh
defaults write com.apple.finder ShowExternalHardDrivesOnDesktop -bool true
#+end_src

*Hide icons for CDs, DVDs on the desktop*
#+begin_src sh
defaults write com.apple.finder ShowRemovableMediaOnDesktop -bool false
#+end_src

*Hide icons for Connected servers on the desktop*
#+begin_src sh
defaults write com.apple.finder ShowMountedServersOnDesktop -bool false
#+end_src

*New Finder windows show Home directory*
| Position            | NewWindowTarget | NewWindowTargetPath                                                                                    |
|---------------------+-----------------+--------------------------------------------------------------------------------------------------------|
| User's Macintosh    | PfCm            | -                                                                                                      |
| Macintosh HD - Data | PfVo            | file:///                                                                                               |
| Home                | PfHm            | file://${HOME}/                                                                                        |
| Desktop             | PfDe            | file:///Users/$(whoami)/Desktop/                                                                       |
| Documents           | PfDo            | file:///Users/$(whoami)/Documents/                                                                     |
| iCloud Drive        | PfID            | file:///Users/$(whoami)/Library/Mobile%20Documents/com~apple~CloudDocs/                                |
| Recents             | PfAF            | file:///System/Library/CoreServices/Finder.app/Contents/Resources/MyLibraries/myDocuments.cannedSearch |
| Others              | PfLo            | file:///full/path/here/                                                                                |
#+begin_src sh
defaults write com.apple.finder NewWindowTarget -string "PfHm"
defaults write com.apple.finder NewWindowTargetPath -string "file://${HOME}/"
#+end_src

*Open folders in tabs instead of new windows*
#+begin_src sh
defaults write com.apple.finder FinderSpawnTab -bool true
#+end_src
*** Sidebar
*Install tool to manage Finder sidebar: mysides*
#+begin_src sh
brew cask install mysides
#+end_src

*Remove Desktop from sidebar*
#+begin_src sh
mysides remove Desktop
#+end_src

*Remove Recents from sidebar*
#+begin_src sh
mysides remove Recents
#+end_src

*Add Home directory to sidebar*
#+begin_src sh
mysides add $(whoami) file:///Users/$(whoami)
#+end_src

*Add ~/Document/Code to sidebar*
#+begin_src sh
mysides add Code file:///Users/$(whoami)/Documents/Code
#+end_src

*Add ~/Document/Book to sidebar*
#+begin_src sh
mysides add Code file:///Users/$(whoami)/Documents/Book
#+end_src

*Add ~/Document/Score to sidebar*
#+begin_src sh
mysides add Code file:///Users/$(whoami)/Documents/Score
#+end_src

*Remove Recent Tags from sidebar*
#+begin_src sh
defaults write com.apple.finder ShowRecentTags -bool false
#+end_src
*** Advanced
*Show all file name extensions*
#+begin_src sh
defaults write -g AppleShowAllExtensions -bool true
#+end_src

*Disable warning before changing an extension*
#+begin_src sh
defaults write com.apple.finder FXEnableExtensionChangeWarning -bool false
#+end_src

*Disable warning before removing from iCloud Drive*
#+begin_src sh
defaults write com.apple.finder FXEnableRemoveFromICloudDriveWarning -bool false
#+end_src

*Disable warning before emptying the Trash*
#+begin_src sh
defaults write com.apple.finder WarnOnEmptyTrash -bool false
#+end_src

*Enable remove items from the Trash after 30 days*
#+begin_src sh
defaults write com.apple.finder FXRemoveOldTrashItems -bool true
#+end_src

*Keep folders on top in windows when sorting by name*
#+begin_src sh
defaults write com.apple.finder _FXSortFoldersFirst -bool true
#+end_src

*Keep folders on top on Desktop when sorting by name*
#+begin_src sh
defaults write com.apple.finder _FXSortFoldersFirstOnDesktop -bool true
#+end_src

*When performing a search, Search the Current Folder*
#+begin_src sh
defaults write com.apple.finder FXDefaultSearchScope -string "SCcf"
#+end_src
*** Hidden Features
*Disable Finder Sound*
#+begin_src sh
defaults write com.apple.finder FinderSounds -int 0
#+end_src

*Enable spring loading for directories*\\
What is spring loading: https://www.youtube.com/watch?v=F9kdAxGe9SE
#+begin_src sh
defaults write -g com.apple.springing.enabled -bool true
#+end_src

*Remove the spring loading delay for directories*
#+begin_src sh
defaults write -g com.apple.springing.delay -float 0
#+end_src

*Disable disk image verification*
#+begin_src sh
defaults write com.apple.frameworks.diskimages skip-verify -bool true
defaults write com.apple.frameworks.diskimages skip-verify-locked -bool true
defaults write com.apple.frameworks.diskimages skip-verify-remote -bool true
#+end_src

*Enable sort by kind for icons on the desktop and in other icon views*
#+begin_src sh
/usr/libexec/PlistBuddy -c "Set :DesktopViewSettings:IconViewSettings:arrangeBy kind" ~/Library/Preferences/com.apple.finder.plist
/usr/libexec/PlistBuddy -c "Set :FK_StandardViewSettings:IconViewSettings:arrangeBy kind" ~/Library/Preferences/com.apple.finder.plist
/usr/libexec/PlistBuddy -c "Set :StandardViewSettings:IconViewSettings:arrangeBy kind" ~/Library/Preferences/com.apple.finder.plist
#+end_src

*Set Finder font size to 14*
#+begin_src sh
/usr/libexec/PlistBuddy -c "Set :StandardViewOptions:ColumnViewOptions:FontSize 14" ~/Library/Preferences/com.apple.finder.plist
#+end_src

*Expand File Info panes: General, Open with, and Sharing & Permissions*
#+begin_src sh
defaults write com.apple.finder FXInfoPanesExpanded -dict \
	General -bool true \
	OpenWith -bool true \
	Privileges -bool true
#+end_src

** IDEA
** Xcode

* System Preferences
** General
*Set appearance to auto*\\
How I found it: https://apple.stackexchange.com/a/391814/306411
#+begin_src sh
defaults write -g AppleInterfaceStyleSwitchesAutomatically -bool true
#+end_src

*Set accent color to Pink*
| Accent Color | Values | Status  |
|--------------+-------+---------|
| Red          |     0 |         |
| Orange       |     1 |         |
| Yellow       |     2 |         |
| Green        |     3 |         |
| Blue         |     4 | default |
| Purple       |     5 |         |
| Pink         |     6 |         |
| Logan        |     7 |         |
| Paris Daisy  |     8 |         |
| Coral        |     9 |         |
| Silver       |    10 | custome |
#+begin_src sh
defaults write -g AppleAccentColor -int 6
#+end_src

*Set highlight color to Pink*
| Highlight Color | Values                        | Status  |
|-----------------+------------------------------+---------|
| Red             | "1.000000 0.733333 0.721569" |         |
| Orange          | "1.000000 0.874510 0.701961" |         |
| Yellow          | "1.000000 0.937255 0.690196" |         |
| Green           | "0.752941 0.964706 0.678431" |         |
| Blue            | "0.847059 0.847059 0.862745" | default |
| Purple          | "0.968627 0.831373 1.000000" |         |
| Pink            | "1.000000 0.749020 0.823529" |         |
| Brown           | "0.929412 0.870588 0.792157" |         |
| Graphite        | "0.847059 0.847059 0.862745" |         |
| Silver          | "0.776500 0.776500 0.776500" | custom  |
# Above data is from :https://github.com/buo/dotfiles/blob/master/osx/_01general.sh
Calculate on your own: https://apple.stackexchange.com/a/164905/306411
#+begin_src sh
defaults write -g AppleHighlightColor -string "1.000000 0.749020 0.823529" Pink
#+end_src

*Set sidebar icon size to medium*
| Icon Size | Values | Status  |
|-----------+-------+---------|
| Small     |     1 |         |
| Medium    |     2 | default |
| Large     |     3 |         |
#+begin_src sh
defaults write -g NSTableViewDefaultSizeMode -int 2
#+end_src

*Hide the menu bar Automatically*
#+begin_src sh
defaults write -g _HIHideMenuBar -bool true
#+end_src


*Show scroll bars automatically*
| Scroll Bar Behaviors                     | Values          |
|------------------------------------------+-----------------|
| Automatically based on mouse or trackpad | "Automatic"     |
| When scrolling                           | "WhenScrolling" |
| Always                                   | "Always"        |
#+begin_src sh
defaults write -g AppleShowScrollBars -string "Automatic"
#+end_src

*Click in the scroll bar to jump to the sport that's clicked*
| Click Scroll Bar Behaviors      | Values |
|---------------------------------+--------|
| Jump to the spot that's clicked | true   |
| Jump to the next page           | false  |
#+begin_src sh
defaults write -g AppleScrollerPagingBehavior -bool true
#+end_src

*Set default browser to Chrome*
# You can set default app for different filetypes
# Check ./default_apps.rb
#+begin_src sh
html='
<dict>
    <key>LSHandlerContentType</key>
    <string>public.html</string>
    <key>LSHandlerPreferredVersions</key>
    <dict>
        <key>LSHandlerRoleAll</key>
        <string>-</string>
    </dict>
    <key>LSHandlerRoleAll</key>
    <string>com.google.chrome</string>
</dict>
'

xhtml='
<dict>
    <key>LSHandlerContentType</key>
    <string>public.xhtml</string>
    <key>LSHandlerPreferredVersions</key>
    <dict>
        <key>LSHandlerRoleAll</key>
        <string>-</string>
        <key>LSHandlerRoleViewer</key>
        <string>-</string>
    </dict>
    <key>LSHandlerRoleAll</key>
    <string>com.google.chrome</string>
</dict>
'

http='
<dict>
    <key>LSHandlerPreferredVersions</key>
    <dict>
        <key>LSHandlerRoleAll</key>
        <string>-</string>
    </dict>
    <key>LSHandlerRoleAll</key>
    <string>com.google.chrome</string>
    <key>LSHandlerURLScheme</key>
    <string>http</string>
</dict>
'

https='
<dict>
    <key>LSHandlerPreferredVersions</key>
    <dict>
        <key>LSHandlerRoleAll</key>
        <string>-</string>
    </dict>
    <key>LSHandlerRoleAll</key>
    <string>com.google.chrome</string>
    <key>LSHandlerURLScheme</key>
    <string>https</string>
</dict>
'

defaults write ~/Library/Preferences/com.apple.LaunchServices/com.apple.launchservices.secure.plist LSHandlers -array-add "$html" "$xhtml" "$http" "$https"
#+end_src


*Disable ask to keep changes when closing documents*
#+begin_src sh
defaults write -g NSCloseAlwaysConfirmsChanges -bool false
#+end_src

*Close windows when quitting an app*\\
When it's true, open documents and windows will not be restored when you re-open an app.
#+begin_src sh
defaults write -g NSQuitAlwaysKeepsWindows -bool true
#+end_src

*Set Allow Handoff between this Mac and your iCloud devices*
# Inspired by https://www.jamf.com/jamf-nation/discussions/12545/a-script-to-disable-handoff
#+begin_src sh
defaults -currentHost write com.apple.coreservices.useractivityd ActivityAdvertisingAllowed -bool yes
defaults -currentHost write com.apple.coreservices.useractivityd ActivityReceivingAllowed -bool yes
#+end_src

*Set recent items to 0*
# The relative file is in ~/Library/Application\ Support/com.apple.sharedfilelist/com.apple.LSSharedFileList.RecentDocuments.sfl2
# sfltool nolonger work for sfl2 after 10.13, but you may change the .sfl2 to .plist and manipulate with `defaults write` then change the extension back. It may work but I never try it because there is a simpler way to use apple script.
# https://github.com/buo/dotfiles/blob/d2145bb247700a0cf1018cf351c32a796151befa/osx/_01general.sh#L48-L50
#+begin_src sh
for category in 'applications' 'documents' 'servers'; do
  /usr/bin/osascript -e "tell application \"System Events\" to tell appearance preferences to set recent $category limit to 0"
done
#+end_src


*Use font smoonthing when available*
#+begin_src sh
# defaults -currentHost delete -g AppleFontSmoothing
#+end_src

** Desktop & Screen Saver
*Never start screen saver*
#+begin_src sh
defaults -currentHost write com.apple.screensaver idleTime -int 0
#+end_src
** Dock
*Set the icon size of Dock items to 72 pixels*
#+begin_src sh
defaults write com.apple.dock tilesize -int 72
#+end_src

*Enable magnification*
#+begin_src sh
defaults write com.apple.dock magnification -bool true
#+end_src

*Set magnification size to 100*
#+begin_src sh
defaults write com.apple.dock largesize -int 100
#+end_src

*Change dock position to left*
#+begin_src sh
defaults write com.apple.dock orientation -string "left"
#+end_src

*Change minimize/maximize window effect*
#+begin_src sh
defaults write com.apple.dock mineffect -string "scale"
#+end_src

*Minimize windows into their application’s icon*
#+begin_src sh
defaults write com.apple.dock minimize-to-application -bool true
#+end_src

*Don’t animate opening applications from the Dock*
#+begin_src sh
defaults write com.apple.dock launchanim -bool false
#+end_src

*Automatically hide and show the Dock*
#+begin_src sh
defaults write com.apple.dock autohide -bool true
#+end_src

*Remove the auto-hiding Dock delay*
#+begin_src sh
defaults write com.apple.dock autohide-delay -float 0
#+end_src

*Remove the animation when hiding/showing the Dock*
#+begin_src sh
defaults write com.apple.dock autohide-time-modifier -float 0
#+end_src

*Show indicator lights for open applications in the Dock*
#+begin_src sh
defaults write com.apple.dock show-process-indicators -bool true
#+end_src

*Don’t show recent applications in Dock*
#+begin_src sh
defaults write com.apple.dock show-recents -bool false
#+end_src

*Show only open applications in the Dock*
#+begin_src sh
defaults write com.apple.dock static-only -bool true
#+end_src

*Make Dock icons of hidden applications translucent*
#+begin_src sh
defaults write com.apple.dock showhidden -bool true
#+end_src

*Remove all (default) app icons from the Dock*\\
This is only really useful when setting up a new Mac, or if you don’t use the Dock to launch apps.
#+begin_src sh
defaults write com.apple.dock persistent-apps -array
#+end_src

*Enable spring loading for all Dock items*
#+begin_src sh
defaults write com.apple.dock enable-spring-load-actions-on-all-items -bool true
#+end_src

*Enable highlight hover effect for the grid view of a stack (Dock)*
#+begin_src sh
defaults write com.apple.dock mouse-over-hilite-stack -bool true
#+end_src

*Add a spacer to the left side of the Dock (where the applications are)*
#+begin_src sh
defaults write com.apple.dock persistent-apps -array-add '{tile-data={}; tile-type="spacer-tile";}'
#+end_src

*Add a spacer to the right side of the Dock (where the Trash is)*
#+begin_src sh
defaults write com.apple.dock persistent-others -array-add '{tile-data={}; tile-type="spacer-tile";}'
#+end_src
** Accessbility
*Enable Option + Esc to speak selected text*
#+begin_src sh
defaults write com.apple.speech.synthesis.general.prefs SpokenUIUseSpeakingHotKeyFlag -bool true
#+end_src

*Set Samantha to the default speaker*
#+begin_src sh
defaults write com.apple.speech.voice.prefs SelectedVoiceCreator -int 1886745202
defaults write com.apple.speech.voice.prefs SelectedVoiceID -int 184844483
defaults write com.apple.speech.voice.prefs SelectedVoiceName -string "Samantha"
#+end_src

*Enable three finger drag*
#+begin_src sh
defaults write com.apple.AppleMultitouchTrackpad TrackpadThreeFingerDrag -bool true
defaults write com.apple.AppleMultitouchTrackpad TrackpadFourFingerHorizSwipeGesture -int 2
defaults write com.apple.AppleMultitouchTrackpad TrackpadThreeFingerVertSwipeGesture -int 0
defaults write com.apple.AppleMultitouchTrackpad DragLock -bool false
#+end_src

** Security & Privacy
*Allow apps downloaded from anywhere*
#+begin_src sh
sudo spctl --master-disable
#+end_src
** Keyboard
*** Keyboard
*Disable press-and-hold for keys in favor of key repeat*
#+begin_src sh
defaults write -g ApplePressAndHoldEnabled -bool false
#+end_src

*Set fast keyboard repeat rate*\\
TODO: Set InitialKeyRepeat integer range
#+begin_src sh
defaults write -g KeyRepeat -int 2
defaults write -g InitialKeyRepeat -int 15
#+end_src

*Set touchbar(control strip) icons*
#+begin_src sh
defaults write com.apple.controlstrip FullCustomized '(
    "com.apple.system.group.media",
    NSTouchBarItemIdentifierFlexibleSpace,
    "com.apple.system.volume",
    "com.apple.system.mute",
    NSTouchBarItemIdentifierFlexibleSpace,
    "com.apple.system.brightness",
    "com.apple.system.night-shift",
    NSTouchBarItemIdentifierFlexibleSpace,
    "com.apple.system.screen-lock",
    "com.apple.system.notification-center"
)'
#+end_src

*Expaned control strip by default*
#+begin_src sh
defaults write com.apple.touchbar.agent PresentationModeGlobal -string "fullControlStrip"
#+end_src

*** Text
*Disable automatic capitalization*
#+begin_src sh
defaults write -g NSAutomaticCapitalizationEnabled -bool false
#+end_src

*Disable smart dashes*
#+begin_src sh
defaults write -g NSAutomaticDashSubstitutionEnabled -bool false
#+end_src

*Disable automatic period substitution*
#+begin_src sh
defaults write -g NSAutomaticPeriodSubstitutionEnabled -bool false
#+end_src

*Disable smart quotes*
#+begin_src sh
defaults write -g NSAutomaticQuoteSubstitutionEnabled -bool false
#+end_src

*Disable auto-correct*
#+begin_src sh
defaults write -g NSAutomaticSpellingCorrectionEnabled -bool false
#+end_src

*** Shortcuts
*Enable full keyboard access for all controls*\\
(e.g. enable Tab in modal dialogs)
#+begin_src sh
defaults write -g AppleKeyboardUIMode -int 3
#+end_src

*Disable shortcuts to Turn Dock Hiding On/Off*
#+begin_src sh
/usr/libexec/PlistBuddy -c "set :AppleSymbolicHotKeys:52:enabled false" ~/Library/Preferences/com.apple.symbolichotkeys.plist
#+end_src

*Disable shortcuts to Select the previous input source*
#+begin_src sh
/usr/libexec/PlistBuddy -c "set :AppleSymbolicHotKeys:60:enabled false" ~/Library/Preferences/com.apple.symbolichotkeys.plist
#+end_src

*Disable shortcuts to Select next source in input menu*
#+begin_src sh
/usr/libexec/PlistBuddy -c "set :AppleSymbolicHotKeys:61:enabled false" ~/Library/Preferences/com.apple.symbolichotkeys.plist
#+end_src

*Disable shortcuts to Show Spotlight Search*
#+begin_src sh
/usr/libexec/PlistBuddy -c "set :AppleSymbolicHotKeys:64:enabled false" ~/Library/Preferences/com.apple.symbolichotkeys.plist
#+end_src

*Disable shortcuts to Show Finder search window*
#+begin_src sh
/usr/libexec/PlistBuddy -c "set :AppleSymbolicHotKeys:65:enabled false" ~/Library/Preferences/com.apple.symbolichotkeys.plist
#+end_src
*** Input Sources
*Disable Show Input menu in menu bar*
#+begin_src sh
defaults write com.apple.TextInputMenu visible -bool false
#+end_src
** Trackpad
*Enable tap to click*
#+begin_src sh
defaults write com.apple.AppleMultitouchTrackpad Clicking -bool true
#+end_src

*Enable tap with three fingers to Look up & data detectors*
#+begin_src sh
defaults write com.apple.AppleMultitouchTrackpad TrackpadThreeFingerTapGesture -int 2
#+end_src
** Displays
*Enable Night Shift*\\
[[./system-preferences/displays-night-shift.scpt][displays-night-shift.scpt]]
#+begin_src sh
osascript system-preferences/displays-night-shift.scpt
#+end_src
** Battery
*Show battery percentage in menu bar*
#+begin_src sh
defaults write com.apple.menuextra.battery ShowPercent YES
#+end_src
* All Rights Reserved
